#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil _:nil arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:nil tex:t timestamp:nil title:nil toc:3 todo:nil |:t
#+TITLE: BattleSnake 2017 API
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+OPTIONS: gid:nil html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t tex:t toc-tag:nil
#+OPTIONS: toc-todo:nil whn:t
#+HTML_CONTAINER: div
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD: <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
#+HTML_HEAD: <link  href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet">
#+HTML_HEAD: <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.5/js/bootstrap.min.js"></script>
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.5.1 (<a href="http://orgmode.org">Org-mode</a> 9.0.3)
#+STARTUP: content

# run ./scripts/org-server to start the org-server node from the battle snake project root.
# required to regenerate code blocks.
#+BEGIN_SRC elixir :remsh org-server@localhost :sname org-console :exports none
Node.self()
#+END_SRC

#+RESULTS:
: :"org-server@localhost"

#+BEGIN_EXPORT html
<style>
</style>
#+END_EXPORT

* Introduction
Like previous years, all competing clients are expected to provide a web
application that is available at a routeable URL.

Clients are expected to respond to HTTP requests and provide a route for [[#post-start][POST /start]] and [[#post-move][POST /move]].

# FIXME: decide what happends on timeout
All clients are expected to respond within 200ms of the server's initial
request. Failing to respond before the timemout may result in the server
choosing a random move for you.

All responses are expected to have a =200 OK= status code.

* Callbacks
** =POST /start=
   :PROPERTIES:
   :CUSTOM_ID: post-start
   :END:

   Called when a new game is started.

   Game IDs are guaranteed to be unique[fn:2].

   The purpose of this callback is for clients to report what their snake's
   name, colour, and other display properties should be for this game.

   This callback should not be used to manage internal snake state it is not
   guaranteed that as you will be notified when the game ends, or when your
   snake dies.

   All attributes the request are provided to maintain backwards compatibility
   with 2015 snake clients - it is *strongly* recommend that clients exclusively
   use the [[#post-move][move callback]] for any and all game play logic.

   | *URL*     | /start                         |
   | *Method*  | POST                           |
   | *Headers* | Content-Type: application-json |

*** Request attributes
    | Attribute | Type    |
    |-----------+---------|
    | <l>       | <l>     |
    | *game_id* | UUID    |
    | *height*  | integer |
    | *width*   | integer |
    |-----------+---------|
*** Example Request
    #+BEGIN_SRC elixir :remsh org-server@localhost :sname org-console :wrap "SRC js" :eval no-export :exports results :cache yes
      alias BattleSnake.{GameForm}

      %GameForm{
        id: Ecto.UUID.generate()
      }
      |> Poison.encode!(pretty: true)
      |> IO.puts
    #+END_SRC

    #+RESULTS[6084a51ad554b37393dec1e7191d16ed6861537b]:
    #+BEGIN_SRC js
    {
      "width": 20,
      "height": 20,
      "game_id": "b1dadee8-a112-4e0e-afa2-2845cd1f21aa"
    }
    :ok
    #+END_SRC

*** Response Attributes
    | Attribute  |            | Type   |                                                                   |
    |------------+------------+--------+-------------------------------------------------------------------|
    | *color*    |            | string | A valid css color. HSL, RBG, hex, or named colours are all valid. |
    | *head_url* | /optional/ | url    | Url of an image to use for the head of your snake.                |
    | *name*     |            | string | Your snake's name.                                                |
    | *taunt*    | /optional/ | string | Message to display in the game client.                            |

*** Example Response
    - Code: =200 OK=
    - Content:
    #+BEGIN_SRC js
    {
          "color": "#FF0000",
          "head_url": "http://placecage.com/c/100/100",
          "name": "Cage Snake",
          "taunt": "OH GOD NOT THE BEES"
      }
    #+END_SRC
*** Sample call
    #+BEGIN_SRC sh :results verbatim replace :exports both :cache yes :eval no-export :wrap "SRC js"
      my_snake_server_url="localhost:4000/test-snake"

      curl $my_snake_server_url/start \
           -X POST \
           -H "Content-Type: application/json" \
           --data @- <<-REQUEST_BODY
      {"width":20,"height":20,"game_id":"example-game-id"}
       REQUEST_BODY
    #+END_SRC

    #+RESULTS[53c4397691891d18ff67e7ffb1486a598d7ffd8f]:
    #+BEGIN_SRC js
    {"name":"test-snake","color":"#123123"}
    #+END_SRC

** =POST /move=
   :PROPERTIES:
   :CUSTOM_ID: post-move
   :END:
   The game server will issue a request for this callback on each turn to
   request the client's move.

   This callback should be used for all game logic.

   | *URL*     | /start                         |
   | *Method*  | POST                           |
   | *Headers* | Content-Type: application-json |

*** Request Attributes
    | Attribute | Type                    |                                                                                                                                                                                                                     |
    |-----------+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | <l>       | <l>                     |                                                                                                                                                                                                                     |
    | *board*   | Array<Array<[[#type-board-cell][BoardCell]]>> | Two dimensional representation of the board. It's not recommeded that you use this for game logic, instead consider using =food=, =snakes=, =you=, =width= and =height=. This is mostly for backward compatibility. |
    | *food*    | Array<[[#type-point][Point]]>            | Array of all food currently on the board                                                                                                                                                                            |
    | *game_id* | UUID                    |                                                                                                                                                                                                                     |
    | *height*  | integer                 |                                                                                                                                                                                                                     |
    | *snakes*  | Array<[[#type-snake][Snake]]>            | Array of all living snakes in the game                                                                                                                                                                              |
    | *turn*    | integer                 | The current turn.                                                                                                                                                                                                   |
    | *width*   | integer                 |                                                                                                                                                                                                                     |
    | *you*     | UUID                    | A reference to your snake's id, the snake object can be found in =snakes=.                                                                                                                                          |
    |-----------+-------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

*** Example Request
    #+BEGIN_SRC elixir :remsh org-server@localhost :sname org-console :wrap "SRC js" :eval no-export :exports results :cache yes :results value
      alias BattleSnake.{
        Snake,
        World,
      }

      use BattleSnake.Point

      my_snake = %Snake{
        coords: [p(0, 0), p(0, 0), p(0, 0)],
        health_points: 93,
        id: Ecto.UUID.generate(),
        name: "my-snake",
        taunt: "git gud",
        url: "localhost:4000",
      }

      other_snake = %Snake{
        coords: [p(1, 0), p(1, 0), p(1, 0)],
        health_points: 50,
        id: Ecto.UUID.generate(),
        name: "other-snake",
        taunt: "gotta go fast",
        url: "localhost:4001",
      }

      food = [p(1,1)]

      snakes = [my_snake, other_snake]

      %World{
        width: 2,
        height: 2,
        snakes: snakes,
        food: food,
        game_id: Ecto.UUID.generate(),
      }
      |> Poison.encode!(pretty: true, me: my_snake.id)
      |> IO.puts
    #+END_SRC

    #+RESULTS[e909af054857d10965dd9905fdf8433dcd44ba75]:
    #+BEGIN_SRC js
    {
      "you": "5b079dcd-0494-4afd-a08e-72c9a7c2d983",
      "width": 2,
      "turn": 0,
      "snakes": [
        {
          "taunt": "git gud",
          "name": "my-snake",
          "id": "5b079dcd-0494-4afd-a08e-72c9a7c2d983",
          "health_points": 93,
          "coords": [
            [
              0,
              0
            ],
            [
              0,
              0
            ],
            [
              0,
              0
            ]
          ]
        },
        {
          "taunt": "gotta go fast",
          "name": "other-snake",
          "id": "9116ef2a-51c1-4fb5-9b3f-b5d3fbfcbef6",
          "health_points": 50,
          "coords": [
            [
              1,
              0
            ],
            [
              1,
              0
            ],
            [
              1,
              0
            ]
          ]
        }
      ],
      "height": 2,
      "game_id": "aecf53b9-c7f2-4f5d-bc3f-cd14cb8338f0",
      "food": [
        [
          1,
          1
        ]
      ],
      "board": [
        [
          {
            "state": "head",
            "snake": "my-snake"
          },
          {
            "state": "empty"
          }
        ],
        [
          {
            "state": "head",
            "snake": "other-snake"
          },
          {
            "state": "food"
          }
        ]
      ]
    }
    :ok
    #+END_SRC

***  Response Attributes
    | Attribute |            | Type                                         |
    |-----------+------------+----------------------------------------------|
    | *move*    | *required* | "up" \vert "left" \vert "down" \vert "right" |
    | *taunt*   | /optional/ | string                                       |
    |-----------+------------+----------------------------------------------|

*** Example Response
    - Code: =200 OK=
    - Content:
    #+BEGIN_SRC js
      {
          "move": "up",
          "taunt": "gotta go fast"
      }
    #+END_SRC
*** Sample call
    #+BEGIN_SRC sh :results verbatim replace :exports both :cache yes :eval no-export :wrap "SRC js"
      my_snake_server_url="localhost:4000/test-snake"

      curl $my_snake_server_url/move \
           -X POST \
           -H "Content-Type: application/json" \
           --data @- <<-REQUEST_BODY
         {{"you": {"name": "my-snake", "coords": [[0, 0], [0, 0], [0, 0]]},
         "turn": 0, "snakes": [{"name": "my-snake", "coords": [[0, 0], [0, 0],
         [0, 0]]}], "game_id": 0, "food": [[0, 1]], "board": [[{"state": "head",
         "snake": "my-snake"}, {"state": "food"}], [{"state": "empty"},
         {"state": "empty"}]]}
         REQUEST_BODY
    #+END_SRC

    #+RESULTS[5daf13e98697255d552f68e3d7fbe143f00821f5]:
    #+BEGIN_SRC js
    {"move":"right"}
    #+END_SRC


*** Notes
    Requests timeout after 200ms, failing to respond will result in the server
    choosing a move for you.
** Simple Example Snake
   Below is a simple example snake. This is what the bare minimum implementation
   of a /functional/ snake might look like.

   This example is written in Ruby, but you are of course not limited in what
   technology you wish to use.

   In the below example we create a basic Sinatra[fn:1] web application. The app
   severs the two post callbacks, and provides a response containing only the
   required attributes for both.

   #+BEGIN_SRC ruby
     # ./Gemfile
     source "https://rubygems.org"
     gem "sinatra", require: "sinatra/base"
     gem "rack"

     # ./ruby_snake.rb
     require "json"

     class RubySnake < Sinatra::Base
       post "/start" do
         {
           name: "simple-ruby-example-snake",
           color: "#123456"
         }.to_json
       end

       post "/move" do
         {
           move: "up"
         }.to_json
       end
     end
   #+END_SRC

   This Snake only goes up, but it works!


* Data Types
** BoardCell
   :PROPERTIES:
   :CUSTOM_ID: type-board-cell
   :END:
** Point
   :PROPERTIES:
   :CUSTOM_ID: type-point
   :END:
** Snake
   :PROPERTIES:
   :CUSTOM_ID: type-snake
   :END:

* Game Rules
** Objective

   BattleSnake is an adaptation of the classic video game "Snake", where the player
   maneuvers a snake around the play field to collect food pellets, which makes
   the snake grow longer. The main objective is to collect as much food as
   as possible, while avoiding hitting obstacles, such as walls and most
   importantly - your own snake.
   In BattleSnake, each round X number of snakes is pitted against each other,
   and the goal is to be the last snake left alive at the end of the round.

** You lose if your snake...
   - runs into another snake's body.
   - runs into its own body.
   - runs into the walls of the play field.
   - collides head-to-head with a longer snake (both die if they are of the same size).
   - starves.

** Starvation rules
   - Your snake starts out with 100 life and counts down by 1 each turn.
   - When your snake's life total reaches 0, it dies of starvation.

** Avoiding starvation
   - Food pellets spawn randomly around the play field.
   - Each food pellet increases your snake's length by 1 and resets its life to 100.

** Sportsmanship
   - No DDoSing your opponents.
   - No manual control of your snake.

** Turns
   Pellentesque dapibus suscipit ligula. Donec posuere augue in quam. Etiam vel
   tortor sodales tellus ultricies commodo. Suspendisse potenti. Aenean in sem ac
   leo mollis blandit. Donec neque quam, dignissim in, mollis nec, sagittis eu,
   wisi. Phasellus lacus. Etiam laoreet quam sed arcu. Phasellus at dui in ligula
   mollis ultricies. Integer placerat tristique nisl. Praesent augue. Fusce
   commodo. Vestibulum convallis, lorem a tempus semper, dui dui euismod elit,
   vitae placerat urna tortor vitae lacus. Nullam libero mauris, consequat quis,
   varius et, dictum id, arcu. Mauris mollis tincidunt felis. Aliquam feugiat
   tellus ut neque. Nulla facilisis, risus a rhoncus fermentum, tellus tellus
   lacinia purus, et dictum nunc justo sit amet elit.

** Growing longer
   Pellentesque dapibus suscipit ligula. Donec posuere augue in quam. Etiam vel
   tortor sodales tellus ultricies commodo. Suspendisse potenti. Aenean in sem ac
   leo mollis blandit. Donec neque quam, dignissim in, mollis nec, sagittis eu,
   wisi. Phasellus lacus. Etiam laoreet quam sed arcu. Phasellus at dui in ligula
   mollis ultricies. Integer placerat tristique nisl. Praesent augue. Fusce
   commodo. Vestibulum convallis, lorem a tempus semper, dui dui euismod elit,
   vitae placerat urna tortor vitae lacus. Nullam libero mauris, consequat quis,
   varius et, dictum id, arcu. Mauris mollis tincidunt felis. Aliquam feugiat
   tellus ut neque. Nulla facilisis, risus a rhoncus fermentum, tellus tellus
   lacinia purus, et dictum nunc justo sit amet elit.

**  Death
*** Walls
*** Collision
*** Starvation

* General Advice
  coming soon...
* Deploying Your Snake
  coming soon...
* Example Snakes
  more coming soon...
** Ruby Snake
   [[https://github.com/Stembolthq/battle_snake/blob/v2.0.0/examples/ruby_snake/ruby_snake.rb][Ruby Snake]]

* Footnotes

[fn:2] https://en.wikipedia.org/wiki/Universally_unique_identifier#Collisions

[fn:1] http://www.sinatrarb.com/intro.html

# Local Variables:
# org-twbs-table-default-attributes: (:class "table")
# End:
